// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lovedmemory.Infrastructure.Data;

#nullable disable

namespace lovedmemory.infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421200041_comment-status")]
    partial class commentstatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("lovedmemory")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("aspnetroles", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_role_id");

                    b.ToTable("aspnetroleclaims", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_user_id");

                    b.ToTable("aspnetuserclaims", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_user_id");

                    b.ToTable("aspnetuserlogins", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_role_id");

                    b.ToTable("aspnetuserroles", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NickName")
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("OtherName")
                        .HasColumnType("text")
                        .HasColumnName("other_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("aspnetusers", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("added_by_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audio");

                    b.HasIndex("AddedById")
                        .HasDatabaseName("ix_audio_added_by_id");

                    b.HasIndex("MemorialId")
                        .HasDatabaseName("ix_audio_memorial_id");

                    b.ToTable("audio", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean")
                        .HasColumnName("edited");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_comment_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TreeLevel")
                        .HasColumnType("integer")
                        .HasColumnName("tree_level");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("MemorialId")
                        .HasDatabaseName("ix_comments_memorial_id");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_comments_parent_comment_id");

                    b.ToTable("comments", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<bool>("PrivacyAgree")
                        .HasColumnType("boolean")
                        .HasColumnName("privacy_agree");

                    b.HasKey("Id")
                        .HasName("pk_contact_messages");

                    b.ToTable("contact_messages", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.CoverPhoto", b =>
                {
                    b.Property<int>("CoverPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cover_photo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoverPhotoId"));

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int?>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("CoverPhotoId")
                        .HasName("pk_cover_photo");

                    b.HasIndex("MemorialId")
                        .IsUnique()
                        .HasDatabaseName("ix_cover_photo_memorial_id");

                    b.ToTable("cover_photo", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_location");

                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.HasKey("Id")
                        .HasName("pk_event_details");

                    b.ToTable("event_details", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.ExtraDetails", b =>
                {
                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<string>("BirthCountry")
                        .HasColumnType("text")
                        .HasColumnName("birth_country");

                    b.Property<DateOnly?>("CommemorationDate")
                        .HasColumnType("date")
                        .HasColumnName("commemoration_date");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date")
                        .HasColumnName("date_of_death");

                    b.Property<string>("DeathCountry")
                        .HasColumnType("text")
                        .HasColumnName("death_country");

                    b.Property<string>("LifeStory")
                        .HasColumnType("text")
                        .HasColumnName("life_story");

                    b.Property<string>("NickName")
                        .HasColumnType("text")
                        .HasColumnName("nick_name");

                    b.Property<int?>("Relationship")
                        .HasColumnType("integer")
                        .HasColumnName("relationship");

                    b.HasKey("MemorialId")
                        .HasName("pk_extra_details");

                    b.ToTable("extra_details", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Gallery", b =>
                {
                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added");

                    b.Property<string>("AddedById")
                        .HasColumnType("text")
                        .HasColumnName("added_by_id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MediaTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("media_title");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("MemorialId")
                        .HasName("pk_gallery");

                    b.HasIndex("AddedById")
                        .HasDatabaseName("ix_gallery_added_by_id");

                    b.ToTable("gallery", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.LifeStory", b =>
                {
                    b.Property<int>("MemorialId")
                        .HasColumnType("integer")
                        .HasColumnName("memorial_id");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("story");

                    b.Property<string>("StorySection")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("story_section");

                    b.HasKey("MemorialId")
                        .HasName("pk_life_story");

                    b.ToTable("life_story", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Memorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Biography")
                        .HasColumnType("text")
                        .HasColumnName("biography");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("Edited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("last_modified_by_user_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("main_image_url");

                    b.Property<string>("OtherNames")
                        .HasColumnType("text")
                        .HasColumnName("other_names");

                    b.Property<string>("PersonalPhrase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("personal_phrase");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<DateTimeOffset>("RunDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("run_date");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("view_count");

                    b.HasKey("Id")
                        .HasName("pk_memorials");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("ix_memorials_created_by_user_id");

                    b.ToTable("memorials", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_role_id");

                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.RolePermission", b =>
                {
                    b.HasOne("lovedmemory.Domain.Entities.Other.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Audio", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_users_added_by_id");

                    b.HasOne("lovedmemory.domain.Entities.Memorial", "Memorial")
                        .WithMany("Audios")
                        .HasForeignKey("MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_memorials_memorial_id");

                    b.Navigation("AddedBy");

                    b.Navigation("Memorial");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Memorial", "Memorial")
                        .WithMany("Comments")
                        .HasForeignKey("MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_memorials_memorial_id");

                    b.HasOne("lovedmemory.domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_comments_comments_parent_comment_id");

                    b.Navigation("Memorial");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.CoverPhoto", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Memorial", "Memorial")
                        .WithOne("CoverPhoto")
                        .HasForeignKey("lovedmemory.domain.Entities.CoverPhoto", "MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cover_photo_memorials_memorial_id");

                    b.Navigation("Memorial");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.ExtraDetails", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Memorial", null)
                        .WithOne("ExtraDetails")
                        .HasForeignKey("lovedmemory.domain.Entities.ExtraDetails", "MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_extra_details_memorials_memorial_id");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Gallery", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .HasConstraintName("fk_gallary_users_added_by_id");

                    b.HasOne("lovedmemory.domain.Entities.Memorial", "Memorial")
                        .WithMany("Gallery")
                        .HasForeignKey("MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gallary_memorials_memorial_id");

                    b.Navigation("AddedBy");

                    b.Navigation("Memorial");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.LifeStory", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Memorial", "Memorial")
                        .WithOne("LifeStory")
                        .HasForeignKey("lovedmemory.domain.Entities.LifeStory", "MemorialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_life_story_memorials_memorial_id");

                    b.Navigation("Memorial");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Memorial", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_memorials_aspnetusers_created_by_user_id");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Memorial", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("Comments");

                    b.Navigation("CoverPhoto");

                    b.Navigation("ExtraDetails")
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("LifeStory");
                });
#pragma warning restore 612, 618
        }
    }
}
