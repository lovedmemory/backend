// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using lovedmemory.Infrastructure.Data;

#nullable disable

namespace lovedmemory.infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241206232508_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("lovedmemory")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("aspnetroles", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetroleclaims");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetroleclaims", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_aspnetuserclaims");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuserclaims", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId");

                    b.ToTable("aspnetuserlogins", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId");

                    b.ToTable("aspnetuserroles", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("aspnetusertokens", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permissionid");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_rolepermissions");

                    b.HasIndex("PermissionId");

                    b.ToTable("rolepermissions", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text")
                        .HasColumnName("countrycode");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NickName")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("OtherName")
                        .HasColumnType("text")
                        .HasColumnName("othername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_aspnetusers");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("aspnetusers", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Audio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added");

                    b.Property<string>("AddedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("addedbyid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_audio");

                    b.HasIndex("AddedById");

                    b.HasIndex("TributeId");

                    b.ToTable("audio", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer")
                        .HasColumnName("commentid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean")
                        .HasColumnName("edited");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedbyuserid");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("parentcommentid");

                    b.Property<int>("TreeLevel")
                        .HasColumnType("integer")
                        .HasColumnName("treelevel");

                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CommentId");

                    b.HasIndex("TributeId");

                    b.ToTable("comments", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.CoverPhoto", b =>
                {
                    b.Property<int>("CoverPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("coverphotoid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CoverPhotoId"));

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("imageurl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("CoverPhotoId")
                        .HasName("pk_coverphoto");

                    b.ToTable("coverphoto", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.EventDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<DateTimeOffset>("EventDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("eventdate");

                    b.Property<string>("EventLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("eventlocation");

                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.HasKey("Id")
                        .HasName("pk_eventdetails");

                    b.ToTable("eventdetails", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.ExtraDetails", b =>
                {
                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.Property<string>("BirthCountry")
                        .HasColumnType("text")
                        .HasColumnName("birthcountry");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofbirth");

                    b.Property<DateTimeOffset>("DateOfDeath")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateofdeath");

                    b.Property<string>("DeathCountry")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("deathcountry");

                    b.Property<string>("LifeStory")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lifestory");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<int>("Relationship")
                        .HasColumnType("integer")
                        .HasColumnName("relationship");

                    b.HasKey("TributeId");

                    b.ToTable("tributedetails", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Gallery", b =>
                {
                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTimeOffset>("Added")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added");

                    b.Property<string>("AddedById")
                        .HasColumnType("text")
                        .HasColumnName("addedbyid");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("MediaTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mediatitle");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer")
                        .HasColumnName("mediatype");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mediaurl");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tags");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userid");

                    b.HasKey("TributeId");

                    b.HasIndex("AddedById");

                    b.ToTable("gallery", "lovedmemory");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.LifeStory", b =>
                {
                    b.Property<int>("TributeId")
                        .HasColumnType("integer")
                        .HasColumnName("tributeid");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("story");

                    b.Property<string>("StorySection")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("storysection");

                    b.HasKey("TributeId");

                    b.ToTable("lifestory", "tributes");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Tribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<int>("CoverPhotoId")
                        .HasColumnType("integer")
                        .HasColumnName("coverphotoid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset>("Edited")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("isprivate");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("lastmodifiedbyuserid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lastname");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mainimageurl");

                    b.Property<string>("OtherNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("othernames");

                    b.Property<string>("PersonalPhrase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("personalphrase");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<DateTimeOffset>("RunDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rundate");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer")
                        .HasColumnName("viewcount");

                    b.HasKey("Id")
                        .HasName("pk_tributes");

                    b.HasIndex("CoverPhotoId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("tributes", "lovedmemory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("lovedmemory.Domain.Entities.Other.RolePermission", b =>
                {
                    b.HasOne("lovedmemory.Domain.Entities.Other.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rolepermissions_permissions_permissionid");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Audio", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_aspnetusers_addedbyid");

                    b.HasOne("lovedmemory.domain.Entities.Tribute", "Tribute")
                        .WithMany("Audios")
                        .HasForeignKey("TributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_audio_tributes_tributeid");

                    b.Navigation("AddedBy");

                    b.Navigation("Tribute");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("fk_comments_comments_commentid");

                    b.HasOne("lovedmemory.domain.Entities.Tribute", null)
                        .WithMany("Comments")
                        .HasForeignKey("TributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_tributes_tributeid");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.ExtraDetails", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Tribute", null)
                        .WithOne("ExtraDetails")
                        .HasForeignKey("lovedmemory.domain.Entities.ExtraDetails", "TributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tributedetails_tributes_tributeid");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Gallery", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.AppUser", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById")
                        .HasConstraintName("fk_gallary_aspnetusers_addedbyid");

                    b.HasOne("lovedmemory.domain.Entities.Tribute", "Tribute")
                        .WithMany("Gallery")
                        .HasForeignKey("TributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_gallary_tributes_tributeid");

                    b.Navigation("AddedBy");

                    b.Navigation("Tribute");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.LifeStory", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.Tribute", "Tribute")
                        .WithOne("LifeStory")
                        .HasForeignKey("lovedmemory.domain.Entities.LifeStory", "TributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lifestory_tributes_tributeid");

                    b.Navigation("Tribute");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Tribute", b =>
                {
                    b.HasOne("lovedmemory.domain.Entities.CoverPhoto", "CoverPhoto")
                        .WithMany()
                        .HasForeignKey("CoverPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tributes_coverphoto_coverphotoid");

                    b.HasOne("lovedmemory.domain.Entities.AppUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CoverPhoto");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("lovedmemory.domain.Entities.Tribute", b =>
                {
                    b.Navigation("Audios");

                    b.Navigation("Comments");

                    b.Navigation("ExtraDetails");

                    b.Navigation("Gallery");

                    b.Navigation("LifeStory");
                });
#pragma warning restore 612, 618
        }
    }
}
